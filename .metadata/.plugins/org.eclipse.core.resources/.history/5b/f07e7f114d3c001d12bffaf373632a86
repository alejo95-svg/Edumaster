package com.example.demo.servicio;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.dto.UsuarioRegistroDTO;
import com.example.demo.modelo.Rol;
import com.example.demo.modelo.Usuarios;
import com.example.demo.repositorio.UsuarioRepositorio;

@Service
public class UsuarioServicioImpl implements UsuarioServicio{
	
	private UsuarioRepositorio usuarioRepositorio;
	private BCryptPasswordEncoder passwordEncoder;
	
	public UsuarioServicioImpl(UsuarioRepositorio usuarioRepositorio) {
		super();
		this.usuarioRepositorio = usuarioRepositorio;
	}
	
	@Override
	public Usuarios guardar(UsuarioRegistroDTO registroDTO) {
		Usuarios usuario =new Usuarios(registroDTO.getNombre(),
				registroDTO.getApellido(),
				registroDTO.getEmail(),
				passwordEncoder.encode(registroDTO.getPassword()),
				Arrays.asList(new Rol("ROLE_USER")));
		
		return usuarioRepositorio.save(usuario);
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Usuarios usuario = usuarioRepositorio.findByEmail(username);
		if (usuario == null) {
			throw new UsernameNotFoundException("Usuario o password invalido");
		}
		return (UserDetails) new User(usuario.getEmail(),
				usuario.getPassword(),
				mapearAutoridadesRoles(usuario.getRoles())
		);
	}

	private Object mapearAutoridadesRoles(Collection<Rol> roles) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Usuarios> listarUsuarios() {
		// TODO Auto-generated method stub
		return null;
	}
	
	
}
